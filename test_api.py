"""
Test script for API functionality verification.
Performs complete testing cycle of all endpoints.
"""

import requests
import json
import time

BASE_URL = "http://localhost:8000"


def test_api():
    """
    –¢–µ—Å—Ç—É—î –≤—Å—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ API –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ.
    """
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API...")

    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    test_user = {"email": "test@example.com", "password": "TestPassword123"}

    test_post = {
        "text": "–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ API!"
    }

    try:
        # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è API
        print("\n1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ health check...")
        response = requests.get(f"{BASE_URL}/health")
        print(f"Health Status: {response.status_code}")
        if response.status_code == 200:
            print(f"‚úÖ API –ø—Ä–∞—Ü—é—î: {response.json()}")

        # 2. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó...")
        response = requests.post(
            f"{BASE_URL}/auth/signup",
            json=test_user,
            headers={"Content-Type": "application/json"},
        )
        print(f"Signup Status: {response.status_code}")

        if response.status_code == 201:
            signup_data = response.json()
            token = signup_data["access_token"]
            print(f"‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ.")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {response.text}")
            return

        # 3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
        response = requests.post(
            f"{BASE_URL}/auth/login",
            json=test_user,
            headers={"Content-Type": "application/json"},
        )
        print(f"Login Status: {response.status_code}")

        if response.status_code == 200:
            login_data = response.json()
            token = login_data["access_token"]  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–∫–µ–Ω
            print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {response.text}")

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
        auth_headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
        }

        # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É...")
        response = requests.post(
            f"{BASE_URL}/posts/", json=test_post, headers=auth_headers
        )
        print(f"Create Post Status: {response.status_code}")

        if response.status_code == 201:
            post_data = response.json()
            post_id = post_data["id"]
            print(f"‚úÖ –ü–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: {post_id}")
            print(f"–¢–µ–∫—Å—Ç: {post_data['text']}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É: {response.text}")
            return

        # 5. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ (–ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ - –∑–∞–ø–∏—Ç –¥–æ –ë–î)
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ (–∑–∞–ø–∏—Ç –¥–æ –ë–î)...")
        response = requests.get(f"{BASE_URL}/posts/", headers=auth_headers)
        print(f"Get Posts Status: {response.status_code}")

        if response.status_code == 200:
            posts_data = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(posts_data)} –ø–æ—Å—Ç—ñ–≤ –∑ –ë–î")
            for post in posts_data:
                print(f"  - –ü–æ—Å—Ç {post['id']}: {post['text'][:50]}...")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤: {response.text}")

        # 6. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ (–¥—Ä—É–≥–∞ —Å–ø—Ä–æ–±–∞ - –∑ –∫–µ—à—É)
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–µ—à—É–≤–∞–Ω–Ω—è (–∑–∞–ø–∏—Ç –∑ –∫–µ—à—É)...")
        start_time = time.time()
        response = requests.get(f"{BASE_URL}/posts/", headers=auth_headers)
        end_time = time.time()
        response_time = (end_time - start_time) * 1000

        print(f"Get Posts (Cache) Status: {response.status_code}")
        print(f"–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response_time:.2f} –º—Å")

        if response.status_code == 200:
            cached_posts_data = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(cached_posts_data)} –ø–æ—Å—Ç—ñ–≤ –∑ –∫–µ—à—É")

        # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç—ñ–≤
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        response = requests.get(
            f"{BASE_URL}/posts/stats", headers=auth_headers
        )
        print(f"Stats Status: {response.status_code}")

        if response.status_code == 200:
            stats_data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞:")
            print(f"  - –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: {stats_data['total_posts']}")
            print(f"  - –ó–∞–ø–∏—Å—ñ–≤ —É –∫–µ—à—ñ: {stats_data['cache_info']['size']}")

        # 8. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç—É
        print("\n8Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ –ø–æ—Å—Ç—É...")
        test_post2 = {
            "text": "–î—Ä—É–≥–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–µ—à—É"
        }
        response = requests.post(
            f"{BASE_URL}/posts/", json=test_post2, headers=auth_headers
        )

        if response.status_code == 201:
            post_data2 = response.json()
            post_id2 = post_data2["id"]
            print(f"‚úÖ –î—Ä—É–≥–∏–π –ø–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: {post_id2}")

        # 9. –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É
        print("\n9Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É...")
        response = requests.delete(
            f"{BASE_URL}/posts/{post_id}", headers=auth_headers
        )
        print(f"Delete Post Status: {response.status_code}")

        if response.status_code == 200:
            delete_data = response.json()
            print(f"‚úÖ –ü–æ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ: {delete_data['message']}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É: {response.text}")

        # 10. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Å—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        print("\nüîü –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Å—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è...")
        response = requests.get(f"{BASE_URL}/posts/", headers=auth_headers)

        if response.status_code == 200:
            final_posts = response.json()
            print(f"‚úÖ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {len(final_posts)} –ø–æ—Å—Ç—ñ–≤")
            for post in final_posts:
                print(f"  - –ü–æ—Å—Ç {post['id']}: {post['text'][:50]}...")

        # 11. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤–µ–ª–∏–∫–æ–≥–æ –ø–æ—Å—Ç—É (1MB)
        print("\n1Ô∏è‚É£1Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ä–æ–∑–º—ñ—Ä—É –ø–æ—Å—Ç—É...")
        large_text = "–ê" * (1024 * 1024 + 1)  # –ë—ñ–ª—å—à–µ 1MB
        large_post = {"text": large_text}

        response = requests.post(
            f"{BASE_URL}/posts/", json=large_post, headers=auth_headers
        )
        print(f"Large Post Status: {response.status_code}")

        if response.status_code == 422:
            print("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É –ø—Ä–∞—Ü—é—î - –≤–µ–ª–∏–∫–∏–π –ø–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        else:
            print(
                f"‚ùå –û—á—ñ–∫—É–≤–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó, –∞–ª–µ –æ—Ç—Ä–∏–º–∞–Ω–æ: {response.status_code}"
            )

        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except requests.exceptions.ConnectionError:
        print(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8000"
        )
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")


def test_invalid_token():
    """
    –¢–µ—Å—Ç—É—î –ø–æ–≤–µ–¥—ñ–Ω–∫—É API –∑ –Ω–µ–¥—ñ–π—Å–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º.
    """
    print("\nüîí –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...")

    invalid_headers = {
        "Authorization": "Bearer invalid-token-here",
        "Content-Type": "application/json",
    }

    response = requests.get(f"{BASE_URL}/posts/", headers=invalid_headers)

    if response.status_code == 401:
        print("‚úÖ –ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
    else:
        print(
            f"‚ùå –û—á—ñ–∫—É–≤–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ 401, –∞–ª–µ –æ—Ç—Ä–∏–º–∞–Ω–æ: {response.status_code}"
        )


if __name__ == "__main__":
    test_api()
    test_invalid_token()
    print("\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏—â–µ.")
